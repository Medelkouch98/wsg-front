import { Component, OnDestroy, OnInit } from '@angular/core';
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import { Meta, PaginatedApiResponse } from '@app/models';
import { AsyncPipe, DatePipe, NgClass, NgIf } from '@angular/common';
import { Observable, Subscription } from 'rxjs';
import { MatPaginatorModule, PageEvent } from '@angular/material/paginator';
import { MIN_PAGE_SIZE_OPTIONS } from '@app/config';
import { MatSortModule, Sort } from '@angular/material/sort';
import {
  ExploitantCentreRowForm,
  IExploitantCentre,
  IExploitantCentreGroup,
  IExploitantCentreRowForm,
} from './models';
import {
  FormArray,
  FormBuilder,
  FormGroup,
  ReactiveFormsModule,
  Validators,
} from '@angular/forms';
import {
  CustomDateMaskDirective,
  FieldControlLabelDirective,
  NoDataSearchDirective,
} from '@app/directives';
import { MatTableDataSource, MatTableModule } from '@angular/material/table';
import { FormControlErrorPipe } from '@app/pipes';
import { GlobalHelper } from '@app/helpers';
import { MatDialog } from '@angular/material/dialog';
import { ConfirmationPopupComponent } from '@app/components';
import { filter, map, take, tap, withLatestFrom } from 'rxjs/operators';
import { MatCardModule } from '@angular/material/card';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { ExploitantCentreStore } from '../../exploitant-centre.store';
import { ExploitantCentreValidators } from '../../validators/exploitant-centre.validators';
import { HelpAttestationPopupComponent } from '../help-attestation-popup/help-attestation-popup.component';
import * as moment from 'moment';
import { ManualAttestationPopupComponent } from '../manual-attestation-popup/manual-attestation-popup.component';
import { MatTooltipModule } from '@angular/material/tooltip';
import { ISignatureForm } from '../manual-attestation-popup/models';
import { select, Store } from '@ngrx/store';
import * as authSelector from '../../../../../core/store/auth/auth.selectors';
import { PermissionType } from '@app/enums';
import { AppState } from '../../../../../core/store/app.state';

@Component({
  selector: 'app-exploitant-centre-save-table',
  standalone: true,
  imports: [
    MatCardModule,
    MatTableModule,
    MatFormFieldModule,
    MatInputModule,
    MatDatepickerModule,
    MatButtonModule,
    MatIconModule,
    MatPaginatorModule,
    MatSortModule,
    MatTooltipModule,
    TranslateModule,
    AsyncPipe,
    NgIf,
    DatePipe,
    NgClass,
    FieldControlLabelDirective,
    ReactiveFormsModule,
    FormControlErrorPipe,
    NoDataSearchDirective,
    ConfirmationPopupComponent,
    HelpAttestationPopupComponent,
    CustomDateMaskDirective,
  ],
  templateUrl: './exploitant-centre-save-table.component.html',
})
export class ExploitantCentreSaveTableComponent implements OnInit, OnDestroy {
  public isReadOnly$: Observable<boolean> = this.store.pipe(
    select(authSelector.AccessPermissionsSelector),
    map(
      (accessPermissions: PermissionType[]) =>
        !accessPermissions.includes(PermissionType.WRITE)
    )
  );
  public page$: Observable<PageEvent> = this.exploitantCentreStore.pageEvent$;
  public sort$: Observable<Sort> = this.exploitantCentreStore.sort$;
  public meta$: Observable<Meta> = this.exploitantCentreStore.meta$;
  public dataSource = new MatTableDataSource<
    FormGroup<ExploitantCentreRowForm>
  >();
  public columns: string[] = [
    'nom',
    'prenom',
    'date_naissance',
    'ville_naissance',
    'date_designation',
    'lien_attestation',
    'actions',
  ];
  public exploitantCentreForm: FormGroup<IExploitantCentreGroup>;
  public maxToDate: Date = new Date();
  public isReadOnly: boolean;
  public exploitantCentreToEdit: IExploitantCentre;
  public MIN_PAGE_SIZE_OPTIONS = MIN_PAGE_SIZE_OPTIONS;
  public subscription: Subscription = new Subscription();

  constructor(
    private exploitantCentreStore: ExploitantCentreStore,
    private exploitantCentreValidators: ExploitantCentreValidators,
    private fb: FormBuilder,
    private dialog: MatDialog,
    private translateService: TranslateService,
    private store: Store<AppState>
  ) {}

  ngOnInit() {
    this.exploitantCentreStore.exploitantsCentre$
      .pipe(withLatestFrom(this.isReadOnly$))
      .subscribe(
        ([dataSource, isReadOnly]: [
          PaginatedApiResponse<IExploitantCentre>,
          boolean
        ]) => {
          this.createExploitantCentreForm();
          this.exploitantCentreToEdit = null;
          // remplire le tableau par les infos des exploitants du centre
          if (dataSource.data?.length > 0) {
            dataSource.data.forEach((row: IExploitantCentre) => {
              this.exploitantCentreRowsForm().push(
                this.fb.group({
                  ...new ExploitantCentreRowForm(row),
                  date_naissance: [
                    row.date_naissance,
                    [
                      Validators.required,
                      this.exploitantCentreValidators.dateNaissanceValidator(),
                    ],
                  ],
                })
              );
            });
          }
          this.dataSource = new MatTableDataSource(
            this.exploitantCentreRowsForm().controls
          );
          // Ne pas afficher les buttons d'action si l'utilisateur n'a pas de permissions
          this.isReadOnly = isReadOnly;
          if (isReadOnly) {
            this.columns = this.columns.filter(
              (col: string) => col !== 'actions'
            );
          } else if (!this.columns.includes('actions')) {
            this.columns.push('actions');
          }
        }
      );
  }

  /**
   * Créer le formulaire exploitant centre
   */
  createExploitantCentreForm() {
    this.exploitantCentreForm = this.fb.group({
      exploitantCentreRowsForm: this.fb.array(
        [] as FormGroup<IExploitantCentreRowForm>[]
      ),
    });
  }

  /**
   * get contact exploitant centre rows form
   * @return FormArray
   */
  exploitantCentreRowsForm(): FormArray<FormGroup<IExploitantCentreRowForm>> {
    return this.exploitantCentreForm.controls.exploitantCentreRowsForm;
  }

  /**
   * changer la pagination
   * @param pageEvent PageEvent
   */
  public pageChange(pageEvent: PageEvent) {
    this.exploitantCentreStore.setPageEvent(pageEvent);
    this.exploitantCentreStore.getExploitantsCentre();
  }

  /**
   * Trier les données
   * @param sort Sort
   */
  public sortChange(sort: Sort): void {
    this.exploitantCentreStore.setSort(sort);
    this.exploitantCentreStore.getExploitantsCentre();
  }

  /**
   * permet d'activer le champ de sélection pour l'édition
   * @param element FormGroup<IExploitantCentreRowForm>
   */
  editRow(element: FormGroup<IExploitantCentreRowForm>) {
    // Conserver la ligne à modifier afin de la récupérer en cas d'annulation
    this.exploitantCentreToEdit = element.getRawValue();
    element.controls.isEditable.setValue(true);
  }

  /**
   * update exploitant centre
   * @param element FormGroup<IExploitantCentreRowForm>
   */
  saveRow(element: FormGroup<IExploitantCentreRowForm>) {
    let updatedValues: { [key: string]: string } = {};
    GlobalHelper.getUpdatedControles(element, updatedValues);
    if (Object.keys(updatedValues).length) {
      ['date_naissance', 'date_designation'].forEach((field: string) => {
        if (field in updatedValues) {
          updatedValues[field] = moment(
            updatedValues[field],
            'YYYY-MM-DD'
          ).format('YYYY-MM-DD');
        }
      });
      this.exploitantCentreStore.updateExploitantCentre({
        data: updatedValues,
        id: element.controls.id.value,
      });
    }
  }

  /**
   * Annuler les changements
   * @param element FormGroup<IExploitantCentreRowForm>
   */
  cancelChanges(element: FormGroup<IExploitantCentreRowForm>): void {
    // récupérer la ligne sauvegardée lors de l'activation du mode édition
    element.patchValue(this.exploitantCentreToEdit);
    this.exploitantCentreToEdit = null;
  }

  /**
   * Supprimer exploitant centre
   * @param element IExploitantCentreRowForm
   */
  delete(element: IExploitantCentreRowForm) {
    this.dialog
      .open(ConfirmationPopupComponent, {
        data: {
          message: this.translateService.instant(
            'qualite.exploitant-centre.msgSuppression',
            {
              value: `${element.nom.value} ${element.prenom.value}`,
            }
          ),
          deny: this.translateService.instant('commun.non'),
          confirm: this.translateService.instant('commun.oui'),
        },
        disableClose: true,
      })
      .afterClosed()
      .pipe(
        take(1),
        filter(Boolean),
        tap(() =>
          this.exploitantCentreStore.deleteExploitantCentre(element.id.value)
        )
      )
      .subscribe();
  }

  /**
   * Ouvrir la popup pour ajouter attestation manuellement
   * @param element IExploitantCentreRowForm
   */
  openElectronicSignPopup(element: FormGroup<IExploitantCentreRowForm>) {
    this.dialog
      .open(ManualAttestationPopupComponent)
      .afterClosed()
      .pipe(
        take(1),
        filter((result: ISignatureForm) => !!result),
        tap((result: ISignatureForm) => {
          const { isEditable, id, ...formRow } = element.getRawValue();
          this.exploitantCentreStore.updateExploitantCentre({
            data: { ...result, ...formRow },
            id,
          });
        })
      )
      .subscribe();
  }

  /**
   * Récupérer l'attestation d'exploitant du centre
   * @param element IExploitantCentreRowForm
   */
  getFile(element: IExploitantCentreRowForm) {
    this.exploitantCentreStore.getAttestation({
      id: element.id.value,
      fileName: element.lien_attestation.value,
    });
  }

  /**
   * Ajouter l'attestation d'exploitant du centre
   * @param files FileList
   * @param element IExploitantCentreRowForm
   */
  addFile(files: FileList, element: IExploitantCentreRowForm) {
    let formData = new FormData();
    formData.append('file', files[0]);
    this.exploitantCentreStore.addAttestation({
      formData,
      id: element.id.value,
    });
  }

  ngOnDestroy() {
    this.subscription.unsubscribe();
  }
}
