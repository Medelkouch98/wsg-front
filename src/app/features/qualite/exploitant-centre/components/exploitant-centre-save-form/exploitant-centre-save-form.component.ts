import { Component, OnDestroy, OnInit } from '@angular/core';
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import {
  CustomDateMaskDirective,
  FieldControlLabelDirective,
  MarkRequiredFormControlAsDirtyDirective,
} from '@app/directives';
import {
  FormBuilder,
  FormGroup,
  ReactiveFormsModule,
  Validators,
} from '@angular/forms';
import { IExploitantCentreForm, IExploitantCentreFormGroup } from './models';
import { FormControlErrorPipe } from '@app/pipes';
import { MatCardModule } from '@angular/material/card';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatMenuModule } from '@angular/material/menu';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatDialog, MatDialogModule } from '@angular/material/dialog';
import { filter, map, take, tap } from 'rxjs/operators';
import { MatChipsModule } from '@angular/material/chips';
import { NgIf } from '@angular/common';
import { Observable, Subject, Subscription } from 'rxjs';
import { select, Store } from '@ngrx/store';
import { PermissionType } from '@app/enums';
import * as authSelector from '../../../../../core/store/auth/auth.selectors';
import { ExploitantCentreStore } from '../../exploitant-centre.store';
import { AppState } from '../../../../../core/store/app.state';
import { ExploitantCentreValidators } from '../../validators/exploitant-centre.validators';
import { ManualAttestationPopupComponent } from '../manual-attestation-popup/manual-attestation-popup.component';
import { ISignatureForm } from '../manual-attestation-popup/models';
import { ToastrService } from 'ngx-toastr';
import { HelpAttestationPopupComponent } from '../help-attestation-popup/help-attestation-popup.component';
import * as moment from 'moment';

@Component({
  selector: 'app-exploitant-centre-save-form',
  standalone: true,
  imports: [
    NgIf,
    TranslateModule,
    FieldControlLabelDirective,
    CustomDateMaskDirective,
    ReactiveFormsModule,
    FormControlErrorPipe,
    MatCardModule,
    MatFormFieldModule,
    MatInputModule,
    MatDatepickerModule,
    MatMenuModule,
    MatButtonModule,
    MatIconModule,
    MatTooltipModule,
    MatChipsModule,
    HelpAttestationPopupComponent,
    MatDialogModule,
    MarkRequiredFormControlAsDirtyDirective,
  ],
  templateUrl: './exploitant-centre-save-form.component.html',
})
export class ExploitantCentreSaveFormComponent implements OnInit, OnDestroy {
  public isReadOnly$: Observable<boolean> = this.store.pipe(
    select(authSelector.AccessPermissionsSelector),
    map(
      (accessPermissions: PermissionType[]) =>
        !accessPermissions.includes(PermissionType.WRITE)
    )
  );
  public exploitantForm: FormGroup<IExploitantCentreFormGroup>;
  public maxToDate: Date = new Date();
  public isReadOnly: boolean;
  public subscription: Subscription = new Subscription();
  generatedAttestationName: string = '';
  public updateRequiredStatus$ = new Subject<void>();
  constructor(
    private fb: FormBuilder,
    private exploitantCentreStore: ExploitantCentreStore,
    private exploitantCentreValidators: ExploitantCentreValidators,
    private dialog: MatDialog,
    private store: Store<AppState>,
    private toasterService: ToastrService,
    private translateService: TranslateService
  ) {}

  ngOnInit() {
    this.createForm();
    this.subscription.add(
      // réinitialiser le formulaire apres l'ajout d'un exploitant centre
      this.exploitantCentreStore.exploitantsCentre$.subscribe(() => {
        this.exploitantForm.reset();
        this.updateRequiredStatus$.next();
      })
    );
    this.subscription.add(
      this.isReadOnly$.subscribe((isReadOnly: boolean) => {
        this.isReadOnly = isReadOnly;
        if (isReadOnly) {
          this.exploitantForm.disable();
        }
      })
    );
  }

  /**
   * Formulaire d'ajout
   */
  createForm() {
    this.exploitantForm = this.fb.group({
      nom: ['', Validators.required],
      prenom: ['', Validators.required],
      date_naissance: [
        '',
        [
          Validators.required,
          this.exploitantCentreValidators.dateNaissanceValidator(),
        ],
      ],
      ville_naissance: ['', Validators.required],
      date_designation: ['', Validators.required],
    });
  }

  /**
   * Ajouter exploitant centre
   */
  addExploitant() {
    this.exploitantCentreStore.addExploitantCentre(
      this.exploitantForm.getRawValue()
    );
  }

  /**
   * Ajouter fichier
   * @param files FileList
   */
  uploadFiles(files: FileList) {
    // Vérifier s'il y a déja une attestation manuelle, dans ce cas
    // il faut supprimer les forms controles liée à l'attestation manuelle
    if (this.exploitantForm.contains('attestation_manuelle')) {
      this.resetGeneratedAttestation();
    }
    if (files.length > 0) {
      // ajouter un nouveau control
      if (!this.exploitantForm.contains('file')) {
        this.exploitantForm.addControl('file', this.fb.control(files[0]));
        return;
      }
      this.exploitantForm.controls.file.setValue(files[0]);
    }
  }

  /**
   * Ouvrir la popup pour ajouter attestation manuelle
   */
  openManualAttestationPopup() {
    this.dialog
      .open(ManualAttestationPopupComponent)
      .afterClosed()
      .pipe(
        take(1),
        filter((result: ISignatureForm) => !!result),
        tap((result: ISignatureForm) => {
          this.toasterService.success(
            this.translateService.instant('commun.operationTerminee')
          );
          if (this.exploitantForm.contains('file')) {
            this.exploitantForm.removeControl('file');
          }
          const nom = this.exploitantForm.controls.nom.value
            ? `-${this.exploitantForm.controls.nom.value}`
            : '';
          const prenom = this.exploitantForm.controls.prenom.value
            ? `-${this.exploitantForm.controls.prenom.value}`
            : '';
          this.generatedAttestationName = `attestation${nom}${prenom}-${moment().format(
            'DD/MM/YYYY'
          )}`;
          this.addGeneratedAttestation(result);
        })
      )
      .subscribe();
  }

  /**
   * Ajouter les forms controles 'attestation_manuelle,date_signature,ville_signature, signature'
   * dans le cas d'une attestation manuelle
   * @param data ISignatureForm | IExploitantCentreForm
   */
  addGeneratedAttestation(data: ISignatureForm | IExploitantCentreForm) {
    if (!this.exploitantForm.contains('attestation_manuelle')) {
      this.exploitantForm.addControl(
        'attestation_manuelle',
        this.fb.control(data.attestation_manuelle)
      );
      this.exploitantForm.addControl(
        'date_signature',
        this.fb.control(data.date_signature)
      );
      this.exploitantForm.addControl(
        'ville_signature',
        this.fb.control(data.ville_signature)
      );
      this.exploitantForm.addControl(
        'signature',
        this.fb.control(data.signature)
      );
      return;
    }
    this.exploitantForm.controls.signature.setValue(data.signature);
    this.exploitantForm.controls.date_signature.setValue(data.date_signature);
    this.exploitantForm.controls.ville_signature.setValue(data.ville_signature);
    //delete attached attestation
    this.deleteAttachedFile();
  }

  /**
   * Supprimer attestation automatique
   */
  deleteAttachedFile() {
    this.exploitantForm.removeControl('file');
  }

  /**
   * Supprimer les données liées à la génération automatique de l'attestation exploitant centre
   */
  resetGeneratedAttestation() {
    this.exploitantForm.removeControl('signature');
    this.exploitantForm.removeControl('date_signature');
    this.exploitantForm.removeControl('ville_signature');
    this.exploitantForm.removeControl('attestation_manuelle');
  }

  /**
   * Ouvrir la popup d'aide qui contient la signification des deux buttons (attach_file, add)
   */
  openHelpPopup() {
    this.dialog.open(HelpAttestationPopupComponent);
  }

  ngOnDestroy() {
    this.subscription.unsubscribe();
  }
}
