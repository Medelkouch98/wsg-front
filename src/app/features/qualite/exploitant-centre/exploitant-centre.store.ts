import { IWsError, PaginatedApiResponse, WsErrorClass } from '@app/models';
import { Injectable } from '@angular/core';
import { ComponentStore } from '@ngrx/component-store';
import { catchError, switchMap, tap, withLatestFrom } from 'rxjs/operators';
import { PageEvent } from '@angular/material/paginator';
import { HttpErrorResponse } from '@angular/common/http';
import { Observable, of } from 'rxjs';
import { DEFAULT_PAGE_SIZE } from '@app/config';
import { SharedService } from '@app/services';
import { Sort } from '@angular/material/sort';
import { ExploitantCentreService } from './services/exploitant-centre.service';
import { TranslateService } from '@ngx-translate/core';
import { ToastrService } from 'ngx-toastr';
import { IExploitantCentre } from './components/exploitant-centre-save-table/models';
import { IExploitantCentreForm } from './components/exploitant-centre-save-form/models';
import * as FileSaver from 'file-saver';

export interface ExploitantCentreState {
  exploitantsCentre: PaginatedApiResponse<IExploitantCentre>;
  sort: Sort;
  pageEvent: PageEvent;
  errors: IWsError;
}

export const initialExploitantCentreState: ExploitantCentreState = {
  exploitantsCentre: new PaginatedApiResponse<IExploitantCentre>(),
  sort: { active: 'date_designation', direction: 'desc' },
  pageEvent: {
    pageIndex: 0,
    pageSize: DEFAULT_PAGE_SIZE,
    length: 0,
  },
  errors: null,
};

@Injectable()
export class ExploitantCentreStore extends ComponentStore<ExploitantCentreState> {
  exploitantsCentre$ = this.select(
    (state: ExploitantCentreState) => state.exploitantsCentre
  );
  pageEvent$ = this.select((state: ExploitantCentreState) => state.pageEvent);
  sort$ = this.select((state: ExploitantCentreState) => state.sort);
  meta$ = this.select(
    (state: ExploitantCentreState) => state.exploitantsCentre?.meta
  );

  constructor(
    private sharedService: SharedService,
    private exploitantCentreService: ExploitantCentreService,
    private translateService: TranslateService,
    private toasterService: ToastrService
  ) {
    super(initialExploitantCentreState);
  }

  // UPDATERS

  private setWsError = (
    error: HttpErrorResponse,
    errorMessage: string,
    showToaster: boolean = false
  ) => {
    const iWsError: IWsError = new WsErrorClass(error);
    const messageToShow = this.translateService.instant(
      'qualite.exploitant-centre.errors.' + errorMessage
    );
    this.patchState({
      errors: {
        ...iWsError,
        messageToShow,
      },
    });
    showToaster ? this.toasterService.error(messageToShow) : '';
    return of(error);
  };

  setPageEvent = (pageEvent: PageEvent) =>
    this.patchState({
      pageEvent,
    });

  setSort = this.updater((state: ExploitantCentreState, sort: Sort) => ({
    ...state,
    sort,
    pageEvent: { ...state.pageEvent, pageIndex: 0 },
  }));

  setExploitantCentre = this.updater(
    (
      state: ExploitantCentreState,
      params: { response: IExploitantCentre; id: number }
    ) => ({
      ...state,
      exploitantsCentre: {
        ...state.exploitantsCentre,
        data: state.exploitantsCentre.data.map((row: IExploitantCentre) =>
          row.id === params.response.id ? params.response : row
        ),
      },
    })
  );

  // EFFECTS

  /**
   * Récupérer la liste des exploitants du centre
   */
  getExploitantsCentre = this.effect((trigger$) =>
    trigger$.pipe(
      withLatestFrom(this.sort$, this.pageEvent$),
      switchMap(([_, sort, pageEvent]: [any, Sort, PageEvent]) => {
        const params = this.sharedService.getQuery(
          null,
          pageEvent.pageIndex + 1,
          pageEvent.pageSize,
          sort
        );
        return this.exploitantCentreService.getExploitantCentre(params).pipe(
          tap((exploitantsCentre: PaginatedApiResponse<IExploitantCentre>) => {
            this.patchState({
              exploitantsCentre,
            });
          }),
          catchError((error: HttpErrorResponse) =>
            this.setWsError(error, 'errorGetExploitant')
          )
        );
      })
    )
  );

  /**
   * Ajouter un exploitant du centre
   * @param exploitantCentreForm$ Observable<IExploitantCentreForm>
   */
  addExploitantCentre = this.effect(
    (exploitantCentreForm$: Observable<IExploitantCentreForm>) =>
      exploitantCentreForm$.pipe(
        switchMap((exploitantForm: IExploitantCentreForm) => {
          const formData: FormData =
            this.exploitantCentreService.createAddExploitantRequest(
              exploitantForm
            );
          return this.exploitantCentreService.addExploitant(formData).pipe(
            tap(() => {
              this.getExploitantsCentre();
              this.toasterService.success(
                this.translateService.instant('commun.operationTerminee')
              );
            }),
            catchError((error: HttpErrorResponse) =>
              this.setWsError(error, 'errorAddExploitant', true)
            )
          );
        })
      )
  );

  /**
   * Modifier un exploitant du centre
   * @param params$ Observable<{ data: { [key: string]: string | number };id: number}>
   */
  updateExploitantCentre = this.effect(
    (
      params$: Observable<{
        data: { [key: string]: string | number };
        id: number;
      }>
    ) =>
      params$.pipe(
        switchMap((params) => {
          return this.exploitantCentreService
            .updateExploitant(params.id, params.data)
            .pipe(
              tap((response: IExploitantCentre) => {
                this.setExploitantCentre({
                  response,
                  id: params.id,
                });
                this.toasterService.success(
                  this.translateService.instant('commun.operationTerminee')
                );
              }),
              catchError((error: HttpErrorResponse) =>
                this.setWsError(error, 'errorUpdateExploitant', true)
              )
            );
        })
      )
  );

  /**
   * Supprimer un exploitant du centre
   * @param idExploitant$ Observable<number>
   */
  deleteExploitantCentre = this.effect((idExploitant$: Observable<number>) =>
    idExploitant$.pipe(
      switchMap((id: number) => {
        return this.exploitantCentreService.deleteExploitant(id).pipe(
          tap(() => {
            this.toasterService.success(
              this.translateService.instant('commun.operationTerminee')
            );
            this.getExploitantsCentre();
          }),
          catchError((error: HttpErrorResponse) =>
            this.setWsError(error, 'errorDeleteExploitant', true)
          )
        );
      })
    )
  );

  /**
   * Récupérer l'attestation de l'exploitant du centre
   * @param data$ Observable<{ id: number; fileName: string }>
   */
  getAttestation = this.effect(
    (data$: Observable<{ id: number; fileName: string }>) =>
      data$.pipe(
        switchMap((data: { id: number; fileName: string }) =>
          this.exploitantCentreService.getAttestation(data.id).pipe(
            tap((blob: Blob) => FileSaver.saveAs(blob, data.fileName)),
            catchError((error: HttpErrorResponse) =>
              this.setWsError(error, 'errorGetAttestationExploitant', true)
            )
          )
        )
      )
  );

  /**
   * Ajouter l'attestation de l'exploitant du centre
   * @param data$ Observable<{ formData: FormData; id: number }>
   */
  addAttestation = this.effect(
    (data$: Observable<{ formData: FormData; id: number }>) =>
      data$.pipe(
        switchMap((data: { formData: FormData; id: number }) =>
          this.exploitantCentreService
            .addAttestation(data.id, data.formData)
            .pipe(
              tap((response: IExploitantCentre) => {
                this.setExploitantCentre({
                  response,
                  id: response.id,
                });
                this.toasterService.success(
                  this.translateService.instant('commun.operationTerminee')
                );
              }),
              catchError((error: HttpErrorResponse) =>
                this.setWsError(error, 'errorAddAttestationExploitant', true)
              )
            )
        )
      )
  );
}
