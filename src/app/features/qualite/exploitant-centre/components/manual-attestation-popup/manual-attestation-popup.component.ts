import { Component, OnInit, ViewChild } from '@angular/core';
import { TranslateModule } from '@ngx-translate/core';
import { MatDialogModule, MatDialogRef } from '@angular/material/dialog';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatDatepickerModule } from '@angular/material/datepicker';
import {
  CustomDateMaskDirective,
  FieldControlLabelDirective,
} from '@app/directives';
import { MatButtonModule } from '@angular/material/button';
import {
  FormBuilder,
  FormControl,
  FormGroup,
  ReactiveFormsModule,
  Validators,
} from '@angular/forms';
import {
  AngularSignaturePadModule,
  NgSignaturePadOptions,
  SignaturePadComponent,
} from '@almothafar/angular-signature-pad';
import { ISignatureFormGroup } from './models';
import { FormControlErrorPipe } from '@app/pipes';
import * as moment from 'moment';
import { JsonPipe } from '@angular/common';
import { Moment } from 'moment';

@Component({
  selector: 'app-manual-attestation-popup',
  standalone: true,
  templateUrl: './manual-attestation-popup.component.html',
  imports: [
    TranslateModule,
    MatDialogModule,
    MatFormFieldModule,
    MatInputModule,
    MatDatepickerModule,
    FieldControlLabelDirective,
    MatButtonModule,
    ReactiveFormsModule,
    AngularSignaturePadModule,
    FormControlErrorPipe,
    CustomDateMaskDirective,
    JsonPipe,
  ],
})
export class ManualAttestationPopupComponent implements OnInit {
  @ViewChild('signature')
  public signaturePad: SignaturePadComponent;
  public signatureForm: FormGroup<ISignatureFormGroup>;
  public signaturePadOptions: NgSignaturePadOptions = {
    minWidth: 1,
    canvasWidth: 450,
    canvasHeight: 250,
  };
  public maxToDate: Date | null = new Date();

  constructor(
    private dialogRef: MatDialogRef<ManualAttestationPopupComponent>,
    private fb: FormBuilder
  ) {}

  ngOnInit() {
    this.createForm();
  }

  /**
   * Create form
   */
  createForm() {
    this.signatureForm = this.fb.group({
      attestation_manuelle: new FormControl(1),
      date_signature: new FormControl<string | Moment>({
        value: moment(),
        disabled: true,
      }),
      ville_signature: new FormControl('', Validators.required),
      signature: new FormControl('', Validators.required),
    });
  }

  /**
   * stocker la signature en base_64
   */
  drawComplete() {
    this.signatureForm.controls.signature.setValue(
      this.signaturePad.toDataURL()
    );
  }

  /**
   * Effacer la signature
   */
  clearSignature() {
    this.signaturePad.clear();
    this.signatureForm.controls.signature.setValue('');
  }

  /**
   * Fermer la popup et envoyer les valeurs de formulaire
   */
  emitAction() {
    this.signatureForm.controls.date_signature.setValue(
      moment(this.signatureForm.controls.date_signature.value).format(
        'YYYY-MM-DD'
      )
    );
    this.dialogRef.close(this.signatureForm.getRawValue());
  }
}
